{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Header.js","components/Scroll.js","components/ErrorBoundry.js","containers/RobotsFamily.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Header","props","title","subtitle","Scroll","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","RobotsFamily","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","text","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRequestRobots","logger","createLogger","rootReducers","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_RobotsFamily","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.886ce169.chunk.js","sourcesContent":["import React from 'react';\n\n//Creating components\n\t\t\t//destructuring\nconst Card = ({name, email, id}) =>{  //props \n\treturn(\n\t\t//src - template string\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn(\n\t\t<div>\n\t\t {\n\t\t//we get a user every time (i) we map to the array\n        \trobots.map((user, i) => {\n\t\t//When doing a loop we should do a unique key for each element, key={i}\n\t\t\t\treturn (\n\t\t\t\t  <Card \n\t\t\t\t\tkey={i} \n\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t/>\n\t\t\t    );\n\t        })\n\t       }\n\t\t</div>\n\t\t);\n   }  \n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) =>{\n\treturn(\n\t\t<div className=\"pa2\">\n\t\t\t<input\n\t\t\t\tclassName=\"pa2 ba b--green bg-lightest-blue\" \n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"search robots\"\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Header = (props) =>{\n\treturn(\n\t\t<div className=\"tc\">\n\t\t\t<h1 className=\"f1\">{props.title}</h1>\n\t\t\t<h2 className=\"f2\">{props.subtitle}</h2>\n\t\t</div>\n\t)\n}\nexport default Header;","import React from 'react';\n// props, state and children\n// setting Scrool component to render whatever is inside, rendering its children \"Cardlist\"\nconst Scroll = (props) =>{\n    return( \n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n        {\n            props.children\n        };\n        </div>\n    )\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    componentDidCatch(error, info){ // this works like a try - cathc blocks\n        this.setState({hasError: true});\n    }\n    render(){\n        if(this.state.hasError){\n                return <h1>Page Not Found!!</h1>\n        }\n        else\n            return this.props.children;\n        \n    }\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Header from '../components/Header';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport {setSearchField, requestRobots} from '../actions';\n\n// Defining \"Connect\" parameters\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn{\n\tonSearchChange:(event) => {dispatch(setSearchField(event.target.value))},\n\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\nclass RobotsFamily extends Component{\n\tcomponentDidMount(){\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender(){\n\t\tconst { robots, searchField, onSearchChange, isPending} = this.props;\n\t\tconst filteredRobots = robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\tconst title = \"The Family of Robots\";\n\t\tconst subtitle = \"Get to know each robot and search your favourite one\";\n\t\treturn isPending? (<h1>Loading</h1>) :\n\t\t\t(<div className=\"tc\">\n\t\t\t\t<Header title={title} subtitle={subtitle}/>\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll> \n\t\t\t</div>)\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(RobotsFamily);\n\n//Connect is higher order function - it's a function that returns another function.\n// Connect accept two parameters","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING, \n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED \n} from './constants';\n\n//creating an Action (Action generator)\nexport const setSearchField = (text) =>({ // this action is going to take a text which will be entered\n  //type: 'CHANGE_SEARCH_FIELD',        // return an object 'type' \n  type: CHANGE_SEARCH_FIELD,\n    text: text\n})\n\n// we're returning nothing here.\nexport const requestRobots = () => (dispatch) => {\n  dispatch({type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, data: data}))\n  .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, error: error}))\n}\n\n//thunk-middleware is waiting for a function, if ever a function goes trhough this \n// thunk-middleware (which is kind a tunnel), so it's gonna act upon it","// object to be returned on the action\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n// using thunkMiddlewar\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING, \n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n  } from './constants';\n\n// Reducer computes the new state based on the “previous” state and the \"action\"\n// Reducer receives the setSearchField action and then \"search for Robots\"\n\n// creating the initial state\nconst initialStateSearch = {\n    searchField: ''\n}\n\n//creating a searchRobots reducer\nexport const  searchRobots = (state = initialStateSearch, action={}) => {\n\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n        return { \n            ...state,\n            searchField: action.text\n        };\n\n    default:\n        return state;\n    }\n}\n\nconst initialStateRequestRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n//creating a requestRobots reducer\nexport const requestRobots = (state=initialStateRequestRobots, action={}) =>{\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return{\n                ...state,\n                isPending: true\n            }\n        case REQUEST_ROBOTS_SUCCESS:\n            return{\n                ...state,\n                robots: action.data,\n                isPending: false\n            }\n        case REQUEST_ROBOTS_FAILED:\n            return{\n                ...state,\n                robots: action.error,\n                isPending: false\n            }\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport RobotsFamily from './containers/RobotsFamily';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\n// Provider and connect are API\n// Provider: we use provider to pass down the store.\n// connect: is optmized in order for us to avoid user \"store.subscribe\"\n\nconst logger = createLogger(); // it's used to register actions\nconst rootReducers = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger)); // the store is going to grab a reducer\n\n// we don't wanna pass down all the way down to the smaller components over and over again\n// therefore we use provider to pass down the store.\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<RobotsFamily/>\n\t</Provider>\n, document.getElementById('root')\n);\n\n// the brackets {} means that this a Javascript expression\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}